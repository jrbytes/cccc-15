import React from 'react'
import { fireEvent, getByLabelText, render, waitFor } from '@testing-library/react'
import vitest, { test, expect, vi } from 'vitest'
import App from '../src/App'
import axios from 'axios'

vi.mock('axios')
const mockedAxios = axios as vitest.Mocked<typeof axios>

test("deve criar uma conta de um passageiro por meio do wizard", async () => {
  const { getByLabelText, getByText, getByRole, findByText } = render(<App />)
  expect(getByText('Passo 1')).toBeDefined()
  expect(getByText('0%')).toBeDefined()
  const checkbox = getByRole('checkbox')
  expect(checkbox).toBeDefined()
  fireEvent.click(checkbox)
  expect(getByText('25%')).toBeDefined()
  const buttonNext = getByRole('button', { name: 'Próximo' })
  const buttonPrevious = getByRole('button', { name: 'Anterior' })
  fireEvent.click(buttonNext)
  expect(getByText('Passo 2')).toBeDefined()
  fireEvent.click(buttonPrevious)
  expect(getByText('Passo 1')).toBeDefined()
  fireEvent.click(buttonNext)
  const inputName = getByLabelText('Nome')
  fireEvent.change(inputName, { target: { value: 'John Doe' } })
  expect(getByText('40%')).toBeDefined()
  const inputEmail = getByLabelText('E-mail')
  fireEvent.change(inputEmail, { target: { value: `johndoe${Math.random()}@email.com` } })
  expect(getByText('55%')).toBeDefined()
  const inputCPF = getByLabelText('CPF')
  fireEvent.change(inputCPF, { target: { value: '12345678912' } })
  expect(getByText('70%')).toBeDefined()
  fireEvent.click(buttonNext)
  expect(getByText('Passo 3')).toBeDefined()
  fireEvent.click(buttonPrevious)
  expect(getByText('Passo 2')).toBeDefined()
  fireEvent.click(buttonNext)
  const inputPassword = getByLabelText('Senha')
  fireEvent.change(inputPassword, { target: { value: '12345678' } })
  expect(getByText('85%')).toBeDefined()
  const inputPasswordConfirm = getByLabelText('Confirmação de Senha')
  fireEvent.change(inputPasswordConfirm, { target: { value: '12345678' } })
  expect(getByText('100%')).toBeDefined()
  expect(buttonNext.hidden).toBe(true)
  const submitButton = getByRole('button', { name: 'Enviar' })
  expect(submitButton).toBeDefined()
  mockedAxios.post.mockResolvedValue({ 
    data: { success: 'Conta criada com sucesso' } 
  })
  fireEvent.click(submitButton)
  await waitFor(async() => expect(await findByText('Conta criada com sucesso')).toBeDefined())
})

test("deve mostrar uma mensagem de erro ao tentar ir para o passo 2 caso nenhum tipo de conta tenha sido selecionado", async () => {
  const { findByText, getByRole } = render(<App />)
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  expect(await findByText('Passo 1')).toBeDefined()
  expect(await findByText('Selecione um tipo de conta: passageiro ou motorista ou ambos')).toBeDefined()
})

test("deve mostrar uma mensagem de erro ao tentar ir ao passo 3 caso nome, email, cpf nao sejam digitados", async () => {
  const { container, findByText, getByRole } = render(<App />)
  const checkbox = getByRole('checkbox')
  expect(checkbox).toBeDefined()
  fireEvent.click(checkbox)
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  expect(await findByText('Passo 2')).toBeDefined()
  expect(await findByText('Digite o nome')).toBeDefined()
  const inputName = getByLabelText(container, 'Nome')
  fireEvent.change(inputName, { target: { value: 'John Doe' } })
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  expect(await findByText('Passo 2')).toBeDefined()
  expect(await findByText('Digite o e-mail')).toBeDefined()
  const inputEmail = getByLabelText(container, 'E-mail')
  fireEvent.change(inputEmail, { target: { value: `johndoe${Math.random()}@email.com` } })
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  expect(await findByText('Passo 2')).toBeDefined()
  expect(await findByText('Digite o cpf')).toBeDefined()
  const inputCPF = getByLabelText(container, 'CPF')
  fireEvent.change(inputCPF, { target: { value: '12345678912' } })
  fireEvent.click(getByRole('button', { name: /Próximo/i }))
  expect(await findByText('Passo 3')).toBeDefined()
})

test("deve mostrar uma mensagem de erro ao tentar submeter sem que a senha vazia", async () => {
  const { container, getByRole, getByText } = render(<App />)
  const checkbox = getByRole('checkbox')
  expect(checkbox).toBeDefined()
  fireEvent.click(checkbox)
  const button = getByRole('button', { name: /Próximo/i })
  fireEvent.click(button)
  const inputName = getByLabelText(container, 'Nome')
  fireEvent.change(inputName, { target: { value: 'John Doe' } })
  const inputEmail = getByLabelText(container, 'E-mail')
  fireEvent.change(inputEmail, { target: { value: `johndoe${Math.random()}@email.com` } })
  const inputCPF = getByLabelText(container, 'CPF')
  fireEvent.change(inputCPF, { target: { value: '12345678912' } })
  fireEvent.click(button)
  const inputPassword = getByLabelText(container, 'Senha')
  fireEvent.change(inputPassword, { target: { value: '' } })
  const inputPasswordConfirm = getByLabelText(container, 'Confirmação de Senha')
  fireEvent.change(inputPasswordConfirm, { target: { value: '' } })
  fireEvent.click(getByRole('button', { name: 'Enviar' }))
  expect(getByText('Senha nao deve ser vazia')).toBeDefined()
})

test("deve mostrar uma mensagem de erro ao tentar submeter sem que a senha seja igual", async () => {
  const { container, getByRole, getByText } = render(<App />)
  const checkbox = getByRole('checkbox')
  expect(checkbox).toBeDefined()
  fireEvent.click(checkbox)
  const button = getByRole('button', { name: /Próximo/i })
  fireEvent.click(button)
  const inputName = getByLabelText(container, 'Nome')
  fireEvent.change(inputName, { target: { value: 'John Doe' } })
  const inputEmail = getByLabelText(container, 'E-mail')
  fireEvent.change(inputEmail, { target: { value: `johndoe${Math.random()}@email.com` } })
  const inputCPF = getByLabelText(container, 'CPF')
  fireEvent.change(inputCPF, { target: { value: '12345678912' } })
  fireEvent.click(button)
  const inputPassword = getByLabelText(container, 'Senha')
  fireEvent.change(inputPassword, { target: { value: '12345678' } })
  const inputPasswordConfirm = getByLabelText(container, 'Confirmação de Senha')
  fireEvent.change(inputPasswordConfirm, { target: { value: '' } })
  fireEvent.click(getByRole('button', { name: 'Enviar' }))
  expect(getByText('Senha deve ser igual a confirmação')).toBeDefined()
})